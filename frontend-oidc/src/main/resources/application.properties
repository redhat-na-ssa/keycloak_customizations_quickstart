quarkus.config.locations=/deployments/config

# podman / Kubernetes / Helm

# io.quarkus:quarkus-openshift plugin defaults to S2I to build images
# So as to avoid the need for a running OCP environment to build container images, over-ride this behavior by specifying use of docker/podman to build images 
quarkus.container-image.builder=docker

quarkus.container-image.registry: quay.io
quarkus.container-image.group: redhat_naps_da

quarkus.kubernetes.deployment-target=openshift
quarkus.openshift.env.vars.JAVA_OPTIONS: -Dvertx.metrics.options.enabled=true -Dvertx.metrics.options.registryName=prometheus
quarkus.openshift.resources.limits.cpu: 500m
quarkus.openshift.resources.limits.memory: 512Mi
quarkus.openshift.resources.requests.cpu: 250m
quarkus.openshift.resources.requests.memory: 64Mi
quarkus.openshift.mounts.config.path: /deployments/config
quarkus.openshift.config-map-volumes.config.config-map-name: frontend-oidc
quarkus.openshift.config-map-volumes.config.default-mode: 420
quarkus.openshift.config-map-volumes.config.items."application.properties".path: application.properties

quarkus.openshift.route.expose: true

quarkus.helm.create-tar-file: true

# Logging
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=false

org.eclipse.microprofile.rest.client.propagateHeaders=Authorization

quarkus.openshift.ports.http.host-port: 8080

quarkus.swagger-ui.always-include=true
quarkus.http.cors=true
%dev.quarkus.http.port=7080
%dev.quarkus.rest-client.iBackend.url=http://localhost:6080

