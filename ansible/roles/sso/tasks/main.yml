---

- name: "check if {{ sso_keycloak_tls_secret }} secret exists in {{ namespace_sso }}"
  kubernetes.core.k8s_info:
    kind: Secret 
    name: "{{ sso_keycloak_tls_secret }}"
    namespace: "{{ namespace_sso }}"
  register: tls_secret
- ansible.builtin.fail:
    msg: "No secret {{ sso_keycloak_tls_secret }} found in namespace {{ namespace_sso }}.  Please create this secret as per the project docs"
  when: tls_secret.resources | length == 0


- set_fact:
    sso_hostname: "{{ sso_name }}-{{ namespace_sso }}.{{ ocp_domain }}"
- debug:
    msg: "sso hostname set to {{ sso_hostname }}"

#############       SSO Database      ################
- name: "create {{ sso_db_service_name }} service account in {{ namespace_sso }}"
  k8s:
    state: present
    name: "{{ sso_db_service_name }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ sso_db_service_name }}"
        namespace: "{{ namespace_sso }}"

- name: "create sso db secret {{ sso_db_service_name }}"
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "{{ sso_db_service_name }}"
        namespace: "{{ namespace_sso }}"
      data:
        # Attempt to keep with Service Binding Operator conventions:
        #   - https://github.com/servicebinding/spec#well-known-secret-entries
        host: "{{ sso_db_service_name | b64encode }}"
        port: "{{ sso_db_service_port | b64encode }}"
        username: "{{ sso_db_userid | b64encode }}"
        password: "{{ sso_db_passwd | b64encode }}"
        database_name: "{{ sso_db_name | b64encode }}"

- set_fact:
    create_db_file: "{{ lookup('template', 'templates/sql/create_database.sh' )  }}"
    wait_for_psql_file: "{{ lookup('template', 'templates/sql/wait_for_postgresql.sh' )  }}"
    s_conf_file: "{{ lookup('template', 'templates/sql/' + sso_psql_conf_file )  }}"

- name: "create {{ sso_db_service_name }} configmap"
  k8s:
    state: present
    name: "{{ sso_db_service_name }}"
    namespace: "{{ namespace_sso }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ sso_db_service_name }}"
        namespace: "{{ namespace_sso }}"
      data:
        create_database.sh: "{{ create_db_file }}"
        wait_for_postgresql.sh: "{{ wait_for_psql_file }}"

- name: "create {{ sso_psql_conf_cm }} configmap"
  k8s:
    state: present
    name: "{{ sso_psql_conf_cm }}"
    namespace: "{{ namespace_sso }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ sso_psql_conf_cm }}"
        namespace: "{{ namespace_sso }}"
      data:
        sso-psql-conf.conf: "{{ s_conf_file }}"


- name: "deploy {{ sso_db_service_name }} in {{ namespace_sso }}"
  k8s:
    state: present
    kind: DeploymentConfig
    definition: "{{ lookup('template', 'templates/postgresql.yml') | from_yaml }}"
    namespace: "{{ namespace_sso }}"

- name: "wait until {{ sso_db_service_name }} database is up and running in {{ namespace_sso }}"
  shell: "{{ openshift_cli }} get dc {{ sso_db_service_name }} -o template --template={{ json_template }} -n {{ namespace_sso }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 10
  delay: 30
  changed_when: false

######################################################



#############   SSO Operator    ################

- name: "create operatorgroup in {{ namespace_sso }}"
  import_role:
    name: ../roles/operatorgroup
  vars:
    operatorgroup_name: "{{ namespace_sso }}"
    operatorgroup_namespace: "{{ namespace_sso }}"
    operatorgroup_target_namespace: "{{ namespace_sso }}"

- name: "deploy sso operator in {{ namespace_sso }}"
  import_role:
    name: ../roles/operator_olm
  vars:
    operator_name: sso-operator
    packagemanifest: "{{ sso_operator_packagemanifest }}"
    subscription_channel: "{{ sso_operator_subscription_channel }}"
    subscription_namespace: "{{ namespace_sso }}"
    subscription_name: "{{ sso_operator_subscription_name }}"
    automatic_installplan_approval: "{{ sso_operator_subscription_automatic_installplan_approval }}"
    subscription_starting_csv: "{{ sso_operator_subscription_starting_csv  }}"
    csv_prefix: "{{ sso_operator_csv_prefix }}"
################################################




#############       SSO      ################

- name: "create keycloak custom resource"
  k8s:
    state: present
    name: rhsso
    namespace: "{{ namespace_sso }}"
    definition: "{{ lookup('template', 'templates/'+ keycloak_cr_template) | from_yaml }} "

- name: "wait until {{ sso_name }} is active in {{ namespace_sso }}"
  shell: |
    {{ openshift_cli }} get keycloak.k8s.keycloak.org/{{ sso_name }} -o jsonpath='{.status.conditions[?(@.type == "Ready")].status}' -n {{ namespace_sso }}
  register: result
  until: result.stdout == 'true'
  retries: 50
  delay: 10
  changed_when: False
