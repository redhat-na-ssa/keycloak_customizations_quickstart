version: '3.7'

services:

  vault-dev:
    container_name: vault-dev
    image: docker.io/library/vault:1.12.1
    restart: always
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: vault
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://127.0.0.1:8200
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    networks:
      - sso

  vault-client:
    container_name: vault-client
    image: quay.io/jbride/vault-client:1.12.1-0
    volumes:
    - ./vault/load_vault.sh:/opt/vault/load_vault.sh:bind
    networks:
      - sso
    depends_on:
      - vault-dev

  openldap:
    container_name: openldap
    image: docker.io/osixia/openldap:1.5.0
    restart: always
    ports:
      - "3389:389"
      - "6636:636"
    command: [--copy-service]
    volumes:
    - ./openldap/ldap-example-users-2.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/ldap-example-users-2.ldif:bind
    #- ./openldap/ldap-generated.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/ldap-generated.ldif:bind
    networks:
      - sso

  psql-sso:
    container_name: psql-sso
    image: registry.redhat.io/rhel8/postgresql-12:1-72.1626836556
    restart: always
    ports:
      - "4432:4432"
    environment:
      PGPORT: 4432
      POSTGRESQL_USER: sso
      POSTGRESQL_PASSWORD: sso
      POSTGRESQL_DATABASE: sso
      POSTGRESQL_MAX_PREPARED_TRANSACTIONS: 10
      SCRIPT_DIR: /opt/sql
    volumes:
      - ./sso/db/sso-psql.conf:/opt/app-root/src/postgresql-cfg/sso-psql.conf:bind
    networks:
      - sso

  kc-sso:
    container_name: kc-sso

    # https://github.com/redhat-na-ssa/keycloak_customizations_quickstart/blob/main/etc/sso/Dockerfile
    image: quay.io/jbride/keycloak:20.0.0-0-psql

    restart: always
    ports:
      - "4080:4080"

      # jdwp debugger port
      - "5006:5006"

      # Infinispan/JGroups TCP "start_port"
      - "7800:7800"

    # over-rides the following:
    #   1)  Sets custom set of features as per:  https://www.keycloak.org/server/features
    #   2)  Explicitly sets distributed infinispan cache (which is set to local with 'start-dev'
    command: ['start-dev', '--features="token-exchange,admin-fine-grained-authz,scripts,declarative-user-profile" --cache=ispn']

    environment:

      # Add the following entry in your /etc/hosts:  127.0.0.1  sso.local
      # https://www.keycloak.org/server/hostname
      KC_HOSTNAME_URL: http://sso.local:4080
      KC_HOSTNAME_ADMIN_URL: http://sso.local:4080

      # Setting this to `false` because the backend-oidc service connects to kc-sso via its docker-compose name:  kc-sso   (not sso.local)
      KC_HOSTNAME_STRICT_BACKCHANNEL: 'false'

      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB_URL: 'jdbc:postgresql://psql-sso:4432/sso'
      KC_DB_USERNAME: sso
      KC_DB_PASSWORD: sso

      # Alternative approach to import a realm:  https://github.com/keycloak/kc-sig-fapi/blob/main/docker-compose-keycloak.yml#L41-L57
      JAVA_OPTS_APPEND: -Dkeycloak.migration.strategy=IGNORE_EXISTING -Dkeycloak.import=/opt/realm.json -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006

      KC_HTTP_PORT: 4080
      KC_HTTPS_PORT: 4443

      QUARKUS_LOG_LEVEL: INFO
      QUARKUS_LOG_CATEGORY__ORG_KEYCLOAK_AUTHENTICATION__LEVEL: DEBUG
      QUARKUS_LOG_CATEGORY__ORG_KEYCLOAK_AUTHORIZATION__LEVEL: DEBUG
      QUARKUS_LOG_CATEGORY__ORG_KEYCLOAK_PROTOCOL_OIDC_ENDPOINTS__LEVEL: DEBUG
      QUARKUS_LOG_CATEGORY__ORG_KEYCLOAK_PROTOCOL_OIDC_ENDPOINTS__LEVEL: DEBUG
    volumes:
      - ./sso/realm.json:/opt/realm.json:bind
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kc-sso:4080/realms/kc-demo/.well-known/openid-configuration"]
      interval: 20s
      timeout: 5s
      retries: 5
    depends_on:
      - psql-sso
      - openldap
    networks:
      - sso

  backend-oidc:
    container_name: backend-oidc
    image: quay.io/redhat_naps_da/backend-oidc:0.0.5
    restart: always
    ports:
      - "6080:6080"
    environment:
      QUARKUS_HTTP_PORT: 6080
      QUARKUS_HTTP_SSL-PORT: 6443  
    volumes:
    - ./backend-oidc/application.properties:/deployments/config/application.properties:bind
    depends_on:
      - kc-sso
    networks:
      - sso

  frontend-oidc:
    container_name: frontend-oidc
    image: quay.io/redhat_naps_da/frontend-oidc:0.0.5
    restart: always
    ports:
      - "7080:7080"
    environment:
      QUARKUS_HTTP_PORT: 7080
      QUARKUS_HTTP_SSL-PORT: 7443  
    volumes:
    - ./frontend-oidc/application.properties:/deployments/config/application.properties:bind
    depends_on:
      - backend-oidc
    networks:
      - sso


  token-inspector:
    container_name: token-inspector
    image: quay.io/redhat_naps_da/token-inspector:0.0.1
    restart: always
    ports:
      - "5080:5080"
    environment:
      QUARKUS_HTTP_PORT: 5080
      QUARKUS_HTTP_SSL-PORT: 5443  
    volumes:
    - ./token-inspector/env.production:/opt/token-inspector/src/main/webui/.env:bind
    - ./token-inspector/build_and_start.sh:/opt/token-inspector/build_and_start.sh:bind
    - ./token-inspector/settings.xml:/home/jboss/.m2/settings.xml:bind
    depends_on:
      - kc-sso
      - frontend-oidc
    networks:
      - sso

  mailhog:
    container_name: mailhog
    image: docker.io/mailhog/mailhog:v1.0.1
    restart: always
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - sso

networks:
  default:
    driver: bridge
  sso:
    driver: bridge
